<!DOCTYPE html>
<html lang="ru">
<head>
  <meta charset="UTF-8">
  <meta name="viewport" content="width=device-width, initial-scale=1">
  <title>Управление устройствами</title>
  <!-- Materialize CSS -->
  <link rel="stylesheet" href="https://cdnjs.cloudflare.com/ajax/libs/materialize/1.0.0/css/materialize.min.css">
  <!-- Material Icons -->
  <link href="https://fonts.googleapis.com/icon?family=Material+Icons" rel="stylesheet">
  <style>
    /* Базовые стили */
    body {
      background-color: #f5f5f5;
    }
    .container {
      width: 95%;
      margin-top: 20px;
    }
    header {
      margin-bottom: 30px;
    }
    .search-bar, .sort-bar, .filter-bar {
      margin-bottom: 20px;
    }
    .device-card {
      margin-bottom: 20px;
    }
    .device-card .card {
      border-radius: 10px;
      box-shadow: 0 4px 8px rgba(0, 0, 0, 0.15);
    }
    .device-card .card-title {
      font-size: 1.4rem;
      font-weight: 600;
      margin-bottom: 10px;
    }
    .device-card .collection {
      border: none;
      margin: 0;
    }
    .device-card .collection-item {
      padding: 10px 20px;
      border-bottom: 1px solid #eee;
    }
    .device-card .card-action {
      border-top: 1px solid #eee;
      padding: 10px 20px;
    }
    .device-card .card-action a {
      margin-right: 10px;
    }
    .modal .collection-item {
      border: none;
      padding: 8px 0;
    }
    /* Стили фильтра */
    .filter-bar label {
      margin-right: 20px;
      font-weight: 500;
    }
    .refresh-btn {
      margin-top: 10px;
    }
    /* Стили расширенной аналитики */
    .analytics-grid {
      display: grid;
      grid-template-columns: repeat(auto-fit, minmax(300px, 1fr));
      gap: 1.5rem;
      margin: 2rem 0;
    }
    .analytics-card {
      background: #fff;
      border-radius: 12px;
      padding: 1.5rem;
      box-shadow: 0 4px 6px rgba(0,0,0,0.05);
      position: relative;
    }
    .chart-container {
      position: relative;
      height: 300px;
      margin: 1rem 0;
    }
    .metric-badge {
      position: absolute;
      top: 1rem;
      right: 1rem;
      padding: 0.5rem 1rem;
      border-radius: 20px;
      font-size: 0.9rem;
      background: #e0f2f1;
      color: #00796b;
    }
    .time-filter {
      display: flex;
      gap: 1rem;
      margin: 1rem 0;
    }
    .vendor-table {
      width: 100%;
      border-collapse: collapse;
      margin: 1rem 0;
    }
    .vendor-table td, .vendor-table th {
      padding: 12px;
      border-bottom: 1px solid #eee;
    }
    .subnet-distribution {
      display: grid;
      grid-template-columns: repeat(auto-fit, minmax(200px, 1fr));
      gap: 1rem;
    }
    .subnet-item {
      background: #f8f9fa;
      padding: 1rem;
      border-radius: 8px;
      position: relative;
    }
    .subnet-bar {
      height: 6px;
      background: #e0e0e0;
      border-radius: 3px;
      margin-top: 0.5rem;
      overflow: hidden;
    }
    .subnet-progress {
      height: 100%;
      background: #2196F3;
      transition: width 0.5s ease;
    }
    .export-buttons {
      display: flex;
      gap: 1rem;
      justify-content: flex-end;
      margin-top: 1rem;
    }
    /* Активный фильтр времени */
    .time-filter button.active {
      background-color: #1976d2;
      color: #fff;
    }
  </style>
</head>
<body>
  <div class="container">
    <header>
      <h3>Управление устройствами</h3>
    </header>
    
    <!-- Объединённая карточка аналитики сети и статуса подключений -->
    <div class="analytics-card">
      <div class="row">
        <!-- Метрики -->
        <div class="col s12 m6">
          <h5>Аналитика сети</h5>
          <p id="total-devices">Всего устройств: 0</p>
          <p id="connected-devices">Подключено: 0</p>
          <p id="disconnected-devices">Отключено: 0</p>
          <p id="last-update">Последнее обновление: -</p>
        </div>
        <!-- График подключений -->
        <div class="col s12 m6">
          <canvas id="connectionChart" style="height: 220px;"></canvas>
          <!-- Метка с дополнительной метрикой -->
          <span class="metric-badge"></span>
        </div>
      </div>
    </div>    
    <br>
    <div class="analytics-card">
      <div class="row">
          

    <!-- Панель сортировки и порядка -->
    <div class="row sort-bar">
      <div class="input-field col s12 l4">
        <input type="text" id="search" placeholder="Поиск устройств...">
      </div>
      <div class="input-field col s12 m6 l4">
        <select id="sort-options">
          <option value="name" selected>Сортировать по имени</option>
          <option value="ip">Сортировать по IP</option>
          <option value="last_seen">Сортировать по дате</option>
          <option value="mac">Сортировать по MAC</option>
          <option value="vendor">Сортировать по производителю</option>
        </select>
      </div>
      <div class="input-field col s12 m6 l2">
        <a href="#" id="toggle-order" class="btn">По возрастанию</a>
      </div>
    </div>

    <!-- Фильтр подключения -->
    <div class="row filter-bar">
      <div class="col s12">
        <label>
          <input name="device_filter" type="radio" value="all" checked>
          <span>Все устройства</span>
        </label>
        <label>
          <input name="device_filter" type="radio" value="connected">
          <span>Подключенные</span>
        </label>
        <label>
          <input name="device_filter" type="radio" value="disconnected">
          <span>Отключенные</span>
        </label>
      </div>
    </div>

</div></div>

    <!-- Список устройств -->
    <div class="row" id="devices-list">
      {{#each devices}}
      <div class="col s12 m6 l4 device-card"
           data-device='{{{json this}}}'
           data-name="{{name}}"
           data-ip="{{ip}}"
           data-last_seen="{{last_seen}}"
           data-mac="{{mac}}"
           data-vendor="{{vendor}}"
           data-connected="{{connected}}">
        <div class="card hoverable z-depth-3">
          <div class="card-content">
            <span class="right card-title">{{formatDate last_seen}}</span>
            <span class="card-title">{{name}}</span>
            <ul class="collection">
              <li class="collection-item">
                <i class="material-icons left">power_settings_new</i>
                <span id="connected_{{id}}">
                  {{#if connected}}
                    <span class="green-text"><b>Подключен</b></span>
                  {{else}}
                    <span class="red-text"><b>Отключен</b></span>
                  {{/if}}
                </span>
              </li>
              <li class="collection-item">
                <i class="material-icons left">language</i>
                <span id="ip_{{id}}">{{ip}}</span>
              </li>
              <li class="collection-item">
                <i class="material-icons left">assignment</i>
                <span id="mac{{id}}">{{mac}}</span>
              </li>
              <li class="collection-item">
                <i class="material-icons left">perm_device_information</i>
                <span id="vendor_{{id}}">{{vendor}}</span>
              </li>
            </ul>
          </div>
          <div class="card-action">
            <a href="#history-modal-{{id}}" class="blue-text modal-trigger">Подробнее</a>
            <a href="javascript:void(0)" class="red-text manage-device-ip" data-ip="{{ip}}">IP</a>
            <a href="javascript:void(0)" class="green-text manage-device" data-ip="{{ip}}">Управление</a>
          </div>
        </div>
      </div>
      {{/each}}
    </div>

    <!-- Модальные окна для истории устройства -->
    {{#each devices}}
    <div id="history-modal-{{id}}" class="modal">
      <div class="modal-content">
        <h4>История устройства – {{name}}</h4>
        <ul class="collection" id="history-list-{{id}}">
          <!-- Данные истории будут загружаться динамически -->
        </ul>
      </div>
      <div class="modal-footer">
        <a href="#!" class="modal-close waves-effect waves-green btn-flat">Закрыть</a>
      </div>
    </div>
    {{/each}}

    <!-- Расширенная аналитика -->
    <div class="analytics-grid">
      <!-- Топ производителей -->
      <div class="analytics-card">
        <h5>Топ производителей</h5>
        <div class="chart-container">
          <canvas id="vendorChart"></canvas>
        </div>
        <table class="vendor-table">
          <thead>
            <tr>
              <th>Производитель</th>
              <th>Устройства</th>
              <th>Доля</th>
            </tr>
          </thead>
          <tbody id="vendorTableBody"></tbody>
        </table>
      </div>
      <!-- Карточка активности с выбором интервала -->
      <div class="analytics-card">
        <div class="chart-header">
          <h5>Активность</h5>
          <div class="time-filter">
            <button class="btn-small active" data-range="24h">24ч</button>
            <button class="btn-small" data-range="7d">7д</button>
            <button class="btn-small" data-range="30d">30д</button>
          </div>
        </div>
        <div class="chart-container">
          <canvas id="activityChart"></canvas>
        </div>
        <div class="export-buttons">
          <button class="btn-small" id="exportCSV">Экспорт CSV</button>
        </div>
      </div>

    </div>
  </div>

  <!-- Подключение библиотек JS -->
  <script src="https://code.jquery.com/jquery-3.6.0.min.js"></script>
  <script src="https://cdnjs.cloudflare.com/ajax/libs/materialize/1.0.0/js/materialize.min.js"></script>
  <script src="https://cdn.jsdelivr.net/npm/chart.js"></script>
  <script>
    $(document).ready(() => {
      // Инициализация компонентов Materialize
      $('select').formSelect();
      $('.modal').modal();

      let ascendingOrder = true;
      let currentActivityRange = '24h'; // Интервал по умолчанию

      /* ----------------------- Вспомогательные функции ----------------------- */

      // Преобразование IP в число (для сортировки)
      const ipToNum = ip => {
        if (typeof ip !== 'string') return 0;
        return ip.split('.').reduce((acc, octet) => acc * 256 + parseInt(octet, 10), 0);
      };

      // Форматирование даты
      const formatDate = date => {
        const d = new Date(date);
        const day = String(d.getDate()).padStart(2, '0');
        const month = String(d.getMonth() + 1).padStart(2, '0');
        const year = d.getFullYear();
        const hours = String(d.getHours()).padStart(2, '0');
        const minutes = String(d.getMinutes()).padStart(2, '0');
        const seconds = String(d.getSeconds()).padStart(2, '0');
        return `${day}.${month} ${hours}:${minutes}:${seconds}`;
      };

      /* ------------------------- Обновление аналитики ------------------------ */

      // Обновление базовых метрик (анализ видимых карточек)
      const updateAnalytics = () => {
        const cards = $('.device-card:visible');
        const total = cards.length;
        let connected = 0, disconnected = 0;
        cards.each(function() {
          const isConnected = $(this).data('connected');
          if (isConnected === true || isConnected == "1") connected++;
          else connected; // для читаемости
          if (isConnected === false || isConnected == "0") disconnected++;
        });
        $('#total-devices').text(`Всего устройств: ${total}`);
        $('#connected-devices').text(`Подключено: ${connected}`);
        $('#disconnected-devices').text(`Отключено: ${disconnected}`);
        $('#last-update').text(`Последнее обновление: ${formatDate(new Date())}`);
      };

      // Сортировка устройств
      const sortDevices = (orderBy, ascending) => {
        const cards = $('.device-card').get();
        cards.sort((a, b) => {
          let aVal = $(a).data(orderBy);
          let bVal = $(b).data(orderBy);
          if (orderBy === 'ip') {
            aVal = ipToNum(aVal);
            bVal = ipToNum(bVal);
          } else if (orderBy === 'last_seen') {
            aVal = new Date(aVal).getTime();
            bVal = new Date(bVal).getTime();
          } else {
            if (!isNaN(aVal) && !isNaN(bVal)) {
              aVal = parseFloat(aVal);
              bVal = parseFloat(bVal);
            } else {
              aVal = aVal.toString().toLowerCase();
              bVal = bVal.toString().toLowerCase();
            }
          }
          if (aVal < bVal) return ascending ? -1 : 1;
          if (aVal > bVal) return ascending ? 1 : -1;
          return 0;
        });
        $('#devices-list').html(cards);
      };

      // Фильтрация устройств (по поиску и состоянию подключения)
      const applyFilters = () => {
        const searchText = $('#search').val().toLowerCase();
        const filterState = $('input[name="device_filter"]:checked').val();
        $('.device-card').each(function() {
          const card = $(this);
          const deviceText = card.text().toLowerCase();
          let show = deviceText.includes(searchText);
          const isConnected = card.data('connected');
          if (filterState === 'connected') show = show && (isConnected === true || isConnected == "1");
          else if (filterState === 'disconnected') show = show && (isConnected === false || isConnected == "0");
          card.toggle(show);
        });
        updateAnalytics();
        initExtendedAnalytics();
      };

      /* -------------------------- Обработчики событий ------------------------- */

      $('#sort-options').on('change', () => {
        const orderBy = $('#sort-options').val();
        sortDevices(orderBy, ascendingOrder);
      });

      $('#toggle-order').on('click', function(e) {
        e.preventDefault();
        ascendingOrder = !ascendingOrder;
        const orderBy = $('#sort-options').val();
        sortDevices(orderBy, ascendingOrder);
        $(this).text(`${ascendingOrder ? 'По возрастанию' : 'По убыванию'}`);
      });

      $('#search').on('input', applyFilters);
      $('input[name="device_filter"]').on('change', applyFilters);

      $('#refresh-data').on('click', function(e) {
        e.preventDefault();
        M.toast({html: 'Данные обновлены', classes: 'teal lighten-1'});
        applyFilters();
      });

      // Загрузка истории устройства при открытии модального окна
      $('.modal-trigger').on('click', function() {
        const deviceId = $(this).attr('href').replace('#history-modal-', '');
        const historyList = $(`#history-list-${deviceId}`);
        $.get(`/device-history/${deviceId}`, history => {
          historyList.empty();
          history.forEach(event => {
            historyList.append(`
              <li class="collection-item">
                <i class="material-icons left">${getEventIcon(event.event_type)}</i>
                <span>${event.event_type}</span>
                <span class="secondary-content">${formatDate(event.event_time)}</span>
              </li>
            `);
          });
        }).fail(() => {
          historyList.html('<li class="collection-item red-text">Ошибка загрузки истории</li>');
        });
      });

      // Управление устройством и копирование IP
      $('.manage-device').on('click', function() {
        const ip = $(this).data('ip');
        openVNCViewer(ip);
      });
      $('.manage-device-ip').on('click', function() {
        const ip = $(this).data('ip');
        if (navigator.clipboard) {
          navigator.clipboard.writeText(ip)
            .then(() => M.toast({html: 'IP скопирован в буфер обмена!', classes: 'teal lighten-1 rounded'}))
            .catch(err => console.error("Ошибка копирования IP", err));
        }
      });

      const openVNCViewer = ip => {
        const vncUrl = `vnc://${ip}`;
        window.location.href = vncUrl;
        setTimeout(() => {
          if (document.visibilityState === 'visible') {
            M.toast({html: 'VNC-протокол не поддерживается!', classes: 'red lighten-1 rounded'});
            if (navigator.clipboard) {
              navigator.clipboard.writeText(ip)
                .then(() => console.log("IP скопирован в буфер обмена:", ip))
                .catch(err => console.error("Ошибка копирования IP", err));
            }
          }
        }, 1000);
      };

      const getEventIcon = eventType => {
        switch (eventType) {
          case 'connected': return 'check_circle';
          case 'disconnected': return 'cancel';
          case 'ip_changed': return 'swap_horiz';
          default: return 'info';
        }
      };

      updateAnalytics();

      /* --------------------- Расширенная аналитика с Chart.js --------------------- */

      const charts = {
        connection: initChart('connectionChart', 'doughnut'),
        vendor: initChart('vendorChart', 'bar'),
        activity: initChart('activityChart', 'line')
      };

      // Инициализация расширенной аналитики
      function initExtendedAnalytics() {
        updateConnectionChart();
        updateVendorStats();
        updateActivityChart(currentActivityRange);
        //updateSubnetDistribution();
        updateMetrics();
      }

      // Функция инициализации графика
      function initChart(canvasId, type) {
        const ctx = document.getElementById(canvasId).getContext('2d');
        return new Chart(ctx, {
          type: type,
          data: {},
          options: {
            responsive: true,
            maintainAspectRatio: false,
            plugins: {
              legend: { position: 'bottom' },
              tooltip: { enabled: true }
            }
          }
        });
      }

      // Обновление графика подключения
      function updateConnectionChart() {
        const devices = getFilteredDevices();
        const connected = devices.filter(d => d.connected).length;
        charts.connection.data = {
          labels: ['Подключены', 'Отключены'],
          datasets: [{
            data: [connected, devices.length - connected],
            backgroundColor: ['#4CAF50', '#F44336']
          }]
        };
        charts.connection.update();
      }

      // Обновление статистики производителей
      function updateVendorStats() {
        const vendors = {};
        getFilteredDevices().forEach(device => {
            if (device.vendor != 'Unknown'){
                vendors[device.vendor] = (vendors[device.vendor] || 0) + 1;
            }
          
        });
        const sorted = Object.entries(vendors).sort((a, b) => b[1] - a[1]);
        const topVendors = sorted.slice(0, 5);
        charts.vendor.data = {
          labels: topVendors.map(v => v[0]),
          datasets: [{
            label: 'Устройств',
            data: topVendors.map(v => v[1]),
            backgroundColor: '#2196F3'
          }]
        };
        charts.vendor.update();
        $('#vendorTableBody').html(
          sorted.map(([vendor, count]) => `
            <tr>
              <td>${vendor}</td>
              <td>${count}</td>
              <td>${((count / getFilteredDevices().length) * 100).toFixed(1)}%</td>
            </tr>
          `).join('')
        );
      }

      // Обновление графика активности с учётом выбранного интервала
      function updateActivityChart(range) {
       
        if (range == '24h'){
            range = 24
        } else if (range === '7d'){
            range = 24 * 7
        } else {
            range = 24 * 30
        } 
        $.get(`/device-activ/${range}`, activ => {
            let labels = [], dataPointsConn = [], dataPointsDisConn = [];
            console.log(activ)
            activ.forEach(item => {
             labels.push(`${item.time_interval}`)
             dataPointsConn.push(parseInt(item.connects))
             dataPointsDisConn.push(parseInt(item.disconnects))
            });
            
            
            charts.activity.data = {
              labels: labels,
              datasets: [{
                label: 'Активные подключения',
                data: dataPointsConn,
                borderColor: '#2196F3',
                tension: 0.4,
                fill: false
              },{
                label: 'Отключения',
                data: dataPointsDisConn,
                borderColor: '#f33d21',
                tension: 0.4,
                fill: false
              }]
            };
            charts.activity.update();
        
        }).fail(() => {
            alert(range)

        })
        
      }

      // Обработка клика по кнопкам выбора интервала активности
      $('.time-filter button').on('click', function() {
        $('.time-filter button').removeClass('active');
        $(this).addClass('active');
        currentActivityRange = $(this).data('range');
        updateActivityChart(currentActivityRange);
      });


      // Обновление дополнительных метрик (например, средней активности)
      function updateMetrics() {
        const devices = getFilteredDevices();
        const avgActivity = devices.length > 0 
          ? devices.reduce((sum, d) => sum + (d.activityScore || 0), 0) / devices.length 
          : 0;
        const $badge = $('.metric-badge');
       // $badge.text(`Средняя активность: ${avgActivity.toFixed(1)}`);
      }

      // Получение данных устройств из data-атрибутов карточек
      function getFilteredDevices() {
        return Array.from(document.querySelectorAll('.device-card')).map(card => {
          try {
            return JSON.parse(card.dataset.device);
          } catch (e) {
            return {};
          }
        });
      }

      /* ------------------------------ Экспорт CSV ----------------------------- */

      $('#exportCSV').on('click', () => {
        const csvContent = convertToCSV(getFilteredDevices());
        downloadFile(csvContent, 'devices.csv');
      });

      function convertToCSV(data) {
        if (!data.length) return '';
        const headers = Object.keys(data[0]);
        return [
          headers.join(','),
          ...data.map(row => headers.map(field => JSON.stringify(row[field])).join(','))
        ].join('\n');
      }

      function downloadFile(content, filename) {
        const blob = new Blob([content], { type: 'text/csv;charset=utf-8;' });
        const link = document.createElement('a');
        if (link.download !== undefined) {
          const url = URL.createObjectURL(blob);
          link.setAttribute('href', url);
          link.setAttribute('download', filename);
          link.style.visibility = 'hidden';
          document.body.appendChild(link);
          link.click();
          document.body.removeChild(link);
        }
      }

      // Инициализация расширенной аналитики при загрузке страницы
      initExtendedAnalytics();
    });
  </script>
</body>
</html>
