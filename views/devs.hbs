<style>
    body {
      background-color: #f5f5f5;
    }
    .container {
      width: 95%;
      margin-top: 20px;
    }
    header {
      margin-bottom: 30px;
    }
    .analytics-card {
      margin-bottom: 30px;
    }
    .search-bar, .sort-bar, .filter-bar {
      margin-bottom: 20px;
    }
    .device-card {
      margin-bottom: 20px;
    }
    .device-card .card {
      border-radius: 10px;
      box-shadow: 0 4px 8px rgba(0, 0, 0, 0.15);
    }
    .device-card .card-title {
      font-size: 1.4rem;
      font-weight: 600;
      margin-bottom: 10px;
    }
    .device-card .collection {
      border: none;
      margin: 0;
    }
    .device-card .collection-item {
      padding: 10px 20px;
      border-bottom: 1px solid #eee;
    }
    .device-card .card-action {
      border-top: 1px solid #eee;
      padding: 10px 20px;
    }
    .device-card .card-action a {
      margin-right: 10px;
    }
    .modal .collection-item {
      border: none;
      padding: 8px 0;
    }
    /* Стили для фильтра подключения */
    .filter-bar label {
      margin-right: 20px;
      font-weight: 500;
    }
    /* Кнопка обновления аналитики */
    .refresh-btn {
      margin-top: 10px;
    }
  </style>

    <!-- Поисковая строка -->
    <div class="row search-bar">
      <div class="input-field col s12">
        <input type="text" id="search" placeholder="Поиск устройств...">
      </div>
    </div>

    <!-- Панель сортировки -->
    <div class="row sort-bar">
      <div class="input-field col s12 m6">
        <select id="sort-options">
          <option value="name" selected>Сортировать по имени</option>
          <option value="ip">Сортировать по IP</option>
          <option value="last_seen">Сортировать по дате</option>
          <option value="mac">Сортировать по MAC</option>
          <option value="vendor">Сортировать по производителю</option>
        </select>
      </div>
      <div class="input-field col s12 m6">
        <a href="#" id="toggle-order" class="btn">Порядок: по возрастанию</a>
      </div>
    </div>

    <!-- Фильтр по состоянию подключения -->
    <div class="row filter-bar">
      <div class="col s12">
        <label>
          <input name="device_filter" type="radio" value="all" checked>
          <span>Все устройства</span>
        </label>
        <label>
          <input name="device_filter" type="radio" value="connected">
          <span>Подключенные</span>
        </label>
        <label>
          <input name="device_filter" type="radio" value="disconnected">
          <span>Отключенные</span>
        </label>
      </div>
    </div>

    <!-- Список устройств -->
    <div class="row" id="devices-list">
      {{#each devices}}
      <div class="col s12 m6 l4 device-card"
           data-name="{{name}}"
           data-ip="{{ip}}"
           data-last_seen="{{last_seen}}"
           data-mac="{{mac}}"
           data-vendor="{{vendor}}"
           data-connected="{{connected}}">
        <div class="card hoverable z-depth-3">
          <div class="card-content">
            <!-- Заголовок карточки -->
            <span class="right card-title">{{formatDate last_seen}}</span>
            <span class="card-title">{{name}}</span>
           
            <!-- Информация об устройстве -->
            <ul class="collection">
              <li class="collection-item">
                <i class="material-icons left">power_settings_new</i>
                <span id="connected_{{id}}">
                  {{#if connected}}
                    <span class="green-text"><b>Подключен</b></span>
                  {{else}}
                    <span class="red-text"><b>Отключен</b></span>
                  {{/if}}
                </span>
              </li>
              <li class="collection-item">
                <i class="material-icons left">language</i>
                <span id="ip_{{id}}">{{ip}}</span>
              </li>
              <li class="collection-item">
                <i class="material-icons left">assignment</i>
                <span id="mac{{id}}">{{mac}}</span>
              </li> 
              <li class="collection-item">
                <i class="material-icons left">perm_device_information</i>
                <span id="vendor_{{id}}">{{vendor}}</span>
              </li> 
            </ul>
          </div>
          <!-- Действия с устройством -->
          <div class="card-action">
            <a href="#history-modal-{{id}}" class="blue-text modal-trigger">Подробнее</a>
            <a href="javascript:void(0)" class="red-text manage-device-ip" data-ip="{{ip}}">IP</a>
            <a href="javascript:void(0)" class="green-text manage-device" data-ip="{{ip}}">Управление</a>
          </div>
        </div>
      </div>
      {{/each}}
    </div>

    <!-- Модальные окна для истории устройства -->
    {{#each devices}}
    <div id="history-modal-{{id}}" class="modal">
        <div class="modal-content">
          <h4>История устройства – {{name}}</h4>
          <ul class="collection" id="history-list-{{id}}">
            <!-- История будет загружена динамически -->
          </ul>
        </div>
        <div class="modal-footer">
          <a href="#!" class="modal-close waves-effect waves-green btn-flat">Закрыть</a>
        </div>
      </div>
    {{/each}}

    <!-- Аналитическая панель -->
    <div class="row analytics-card">
      <div class="col s12 m8 offset-m2">
        <div class="card blue lighten-4">
          <div class="card-content">
            <span class="card-title">Аналитика сети</span>
            <p id="total-devices">Всего устройств: 0</p>
            <p id="connected-devices">Подключено: 0</p>
            <p id="disconnected-devices">Отключено: 0</p>
            <p id="last-update">Последнее обновление: -</p>
          </div>
          <div class="card-action">
            <a href="#" id="refresh-data" class="btn-small refresh-btn">Обновить данные</a>
          </div>
        </div>
      </div>
    </div>
  <script>
  $(document).ready(() => {
    // Инициализация компонентов Materialize
    $('select').formSelect();
    $('.modal').modal();

    let ascendingOrder = true;

    // Функция для преобразования IP в число для корректного сравнения
    const ipToNum = ip => {
      if (typeof ip !== 'string') return 0;
      return ip.split('.').reduce((acc, octet) => acc * 256 + parseInt(octet, 10), 0);
    };

    // Функция для форматирования даты
    const formatDate = date => {
      const d = new Date(date);
      const day = String(d.getDate()).padStart(2, '0');
      const month = String(d.getMonth() + 1).padStart(2, '0');
      const year = d.getFullYear();
      const hours = String(d.getHours()).padStart(2, '0');
      const minutes = String(d.getMinutes()).padStart(2, '0');
      const seconds = String(d.getSeconds()).padStart(2, '0');
      return `${day}.${month} ${hours}:${minutes}:${seconds}`;
    };

    // Обновление аналитической панели
    const updateAnalytics = () => {
      const cards = $('.device-card');
      const total = cards.length;
      let connected = 0, disconnected = 0;
      cards.each(function() {
        const isConnected = $(this).data('connected');
        if (isConnected === true || isConnected == "1") {
          connected++;
        } else {
          disconnected++;
        }
      });
      $('#total-devices').text(`Всего устройств: ${total}`);
      $('#connected-devices').text(`Подключено: ${connected}`);
      $('#disconnected-devices').text(`Отключено: ${disconnected}`);
      $('#last-update').text(`Последнее обновление: ${formatDate(new Date())}`);
    };

    // Функция сортировки устройств
    const sortDevices = (orderBy, ascending) => {
      const cards = $('.device-card').get();
      cards.sort((a, b) => {
        let aVal = $(a).data(orderBy);
        let bVal = $(b).data(orderBy);

        if (orderBy === 'ip') {
          aVal = ipToNum(aVal);
          bVal = ipToNum(bVal);
        } else if (orderBy === 'last_seen') {
          aVal = new Date(aVal).getTime();
          bVal = new Date(bVal).getTime();
        } else {
          // Если значение можно привести к числу, сортируем как число
          if (!isNaN(aVal) && !isNaN(bVal)) {
            aVal = parseFloat(aVal);
            bVal = parseFloat(bVal);
          } else {
            aVal = aVal.toString().toLowerCase();
            bVal = bVal.toString().toLowerCase();
          }
        }
        if (aVal < bVal) return ascending ? -1 : 1;
        if (aVal > bVal) return ascending ? 1 : -1;
        return 0;
      });
      $('#devices-list').html(cards);
    };

    // Применение фильтров (по поиску и состоянию подключения)
    const applyFilters = () => {
      const searchText = $('#search').val().toLowerCase();
      const filterState = $('input[name="device_filter"]:checked').val();

      $('.device-card').each(function() {
        const card = $(this);
        const deviceText = card.text().toLowerCase();
        let show = deviceText.includes(searchText);

        // Фильтрация по состоянию подключения
        const isConnected = card.data('connected');
        if (filterState === 'connected') {
          show = show && (isConnected === true || isConnected == "1");
        } else if (filterState === 'disconnected') {
          show = show && (isConnected === false || isConnected == "0");
        }
        card.toggle(show);
      });

      updateAnalytics();
    };

    // Обработчик изменения параметров сортировки
    $('#sort-options').on('change', () => {
      const orderBy = $('#sort-options').val();
      sortDevices(orderBy, ascendingOrder);
    });

    // Обработчик переключения порядка сортировки
    $('#toggle-order').on('click', function(e) {
      e.preventDefault();
      ascendingOrder = !ascendingOrder;
      const orderBy = $('#sort-options').val();
      sortDevices(orderBy, ascendingOrder);
      $(this).text(`Порядок: ${ascendingOrder ? 'по возрастанию' : 'по убыванию'}`);
    });

    // Инициализация сортировки при загрузке
    sortDevices($('#sort-options').val(), ascendingOrder);

    // Обработка поиска и фильтра подключения
    $('#search').on('input', applyFilters);
    $('input[name="device_filter"]').on('change', applyFilters);

    // Кнопка обновления аналитики (и данных, если требуется доработка AJAX)
    $('#refresh-data').on('click', function(e) {
      e.preventDefault();
      // Здесь можно добавить AJAX-запрос для обновления данных
      M.toast({html: 'Данные обновлены', classes: 'teal lighten-1'});
      applyFilters();
    });

    // Обработка нажатия на "Подробнее" для загрузки истории устройства
    $('.modal-trigger').on('click', function() {
      const deviceId = $(this).attr('href').replace('#history-modal-', '');
      const historyList = $(`#history-list-${deviceId}`);

      $.get(`/device-history/${deviceId}`, history => {
        historyList.empty();
        history.forEach(event => {
          historyList.append(`
            <li class="collection-item">
              <i class="material-icons left">${getEventIcon(event.event_type)}</i>
              <span>${event.event_type}</span>
              <span class="secondary-content">${formatDate(event.event_time)}</span>
            </li>
          `);
        });
      }).fail(() => {
        historyList.html('<li class="collection-item red-text">Ошибка загрузки истории</li>');
      });
    });

    // Обработка нажатия на "Управление" и "IP"
    $('.manage-device').on('click', function() {
      const ip = $(this).data('ip');
      openVNCViewer(ip);
    });
    $('.manage-device-ip').on('click', function() {
      const ip = $(this).data('ip');
      if (navigator.clipboard) {
        navigator.clipboard.writeText(ip)
          .then(() => {
            M.toast({html: 'IP скопирован в буфер обмена!', classes: 'teal lighten-1 rounded'});
          })
          .catch(err => console.error("Ошибка копирования IP", err));
      }
    });

    // Функция для открытия VNC Viewer
    const openVNCViewer = ip => {
      const vncUrl = `vnc://${ip}`;
      window.location.href = vncUrl;
      // Если VNC не открылся – уведомляем пользователя
      setTimeout(() => {
        if (document.visibilityState === 'visible') {
          M.toast({html: 'VNC-протокол не поддерживается!', classes: 'red lighten-1 rounded'});
          if (navigator.clipboard) {
            navigator.clipboard.writeText(ip)
              .then(() => console.log("IP скопирован в буфер обмена:", ip))
              .catch(err => console.error("Ошибка копирования IP", err));
          }
        }
      }, 1000);
    };

    // Функция для получения иконки события
    const getEventIcon = eventType => {
      switch (eventType) {
        case 'connected': return 'check_circle';
        case 'disconnected': return 'cancel';
        case 'ip_changed': return 'swap_horiz';
        default: return 'info';
      }
    };

    // Первичное обновление аналитики
    updateAnalytics();
  });
  </script>
