<!DOCTYPE html>
<html lang="ru">
<head>
  <meta charset="UTF-8">
  <title>Управление устройствами</title>
  <meta name="viewport" content="width=device-width, initial-scale=1">
  <!-- Bootstrap CSS -->
  <link href="https://cdn.jsdelivr.net/npm/bootstrap@5.3.0/dist/css/bootstrap.min.css" rel="stylesheet">
  <!-- Bootstrap Icons -->
  <link rel="stylesheet" href="https://cdn.jsdelivr.net/npm/bootstrap-icons@1.10.5/font/bootstrap-icons.css">
  <style>
    /* Легкая анимация при наведении */
    .card {
      transition: transform 0.2s;
    }
    .card:hover {
      transform: scale(1.05);
    }
  </style>
</head>
<body>
<div class="container my-4">
  <h4 class="text-center mb-4">Управление устройствами</h4>

  <!-- Поисковая строка -->
  <div class="row mb-3">
    <div class="col-12">
      <input type="text" id="search" class="form-control" placeholder="Поиск устройств...">
    </div>
  </div>

  <!-- Панель сортировки -->
  <div class="row mb-3">
    <div class="col-12 col-md-6 mb-2 mb-md-0">
      <select id="sort-options" class="form-select">
        <option value="name" selected>Сортировать по имени</option>
        <option value="ip">Сортировать по IP</option>
        <option value="last_seen">Сортировать по дате</option>
        <option value="mac">Сортировать по MAC</option>
        <option value="vendor">Сортировать по производителю</option>
        <option value="connected">Сортировать по статусу подключения</option>
      </select>
    </div>
    <div class="col-12 col-md-6">
      <button id="toggle-order" class="btn btn-secondary w-100">Порядок: по возрастанию</button>
    </div>
  </div>

  <!-- Список устройств -->
  <div class="row" id="devices-list">
    {{#each devices}}
    <div class="col-12 col-md-6 col-lg-4 mb-4 device-card" 
         data-name="{{name}}" 
         data-ip="{{ip}}" 
         data-last_seen="{{last_seen}}"
         data-mac="{{mac}}"
         data-vendor="{{vendor}}"
         data-connected="{{connected}}">
      <div class="card h-100 shadow-sm">
        <div class="card-body">
          <h5 class="card-title">
            {{name}} 
            <small class="text-muted float-end">{{formatDate last_seen}}</small>
          </h5>
          <ul class="list-group list-group-flush mb-3">
            <li class="list-group-item">
              <i class="bi bi-power me-2"></i>
              <span id="connected_{{id}}">
                {{#if connected}}
                  <span class="text-success fw-bold">Подключен</span>
                {{else}}
                  <span class="text-danger fw-bold">Отключен</span>
                {{/if}}
              </span>
            </li>
            <li class="list-group-item">
              <i class="bi bi-globe me-2"></i>
              <span id="ip_{{id}}">{{ip}}</span>
            </li>
            <li class="list-group-item">
              <i class="bi bi-clipboard me-2"></i>
              <span id="mac{{id}}">{{mac}}</span>
            </li>
            <li class="list-group-item">
              <i class="bi bi-info-circle me-2"></i>
              <span id="vendor_{{id}}">{{vendor}}</span>
            </li>
          </ul>
        </div>
        <div class="card-footer bg-transparent">
          <div class="d-flex justify-content-between">
            <a href="#" data-bs-toggle="modal" data-bs-target="#historyModal-{{id}}" class="btn btn-primary btn-sm">Подробнее</a>
            <div>
              <a href="javascript:void(0)" class="btn btn-danger btn-sm manage-device-ip" data-ip="{{ip}}">IP</a>
              <a href="javascript:void(0)" class="btn btn-success btn-sm manage-device" data-ip="{{ip}}">Управление</a>
            </div>
          </div>
        </div>
      </div>
    </div>
    {{/each}}
  </div>

  <!-- Модальные окна для истории устройств -->
  {{#each devices}}
  <div class="modal fade" id="historyModal-{{id}}" tabindex="-1" aria-labelledby="historyModalLabel-{{id}}" aria-hidden="true">
    <div class="modal-dialog">
      <div class="modal-content">
        <div class="modal-header">
          <h5 class="modal-title" id="historyModalLabel-{{id}}">История устройства – {{name}}</h5>
          <button type="button" class="btn-close" data-bs-dismiss="modal" aria-label="Закрыть"></button>
        </div>
        <div class="modal-body">
          <ul class="list-group" id="history-list-{{id}}">
            <!-- История будет загружена динамически -->
          </ul>
        </div>
        <div class="modal-footer">
          <button type="button" class="btn btn-secondary" data-bs-dismiss="modal">Закрыть</button>
        </div>
      </div>
    </div>
  </div>
  {{/each}}
</div>

<!-- Контейнер для уведомлений (toasts) -->
<div id="toast-container" class="position-fixed bottom-0 end-0 p-3" style="z-index: 1055;"></div>

<!-- jQuery (если требуется) -->
<script src="https://code.jquery.com/jquery-3.6.0.min.js"></script>
<!-- Bootstrap JS Bundle (с Popper) -->
<script src="https://cdn.jsdelivr.net/npm/bootstrap@5.3.0/dist/js/bootstrap.bundle.min.js"></script>

<script>
$(document).ready(function() {
  let ascendingOrder = true;

  // Функция для форматирования даты
  function formatDate(date) {
    const d = new Date(date);
    const day = String(d.getDate()).padStart(2, '0');
    const month = String(d.getMonth() + 1).padStart(2, '0');
    const year = d.getFullYear();
    const hours = String(d.getHours()).padStart(2, '0');
    const minutes = String(d.getMinutes()).padStart(2, '0');
    const seconds = String(d.getSeconds()).padStart(2, '0');
    return `${day}.${month}.${year} ${hours}:${minutes}:${seconds}`;
  }

  // Функция для отображения уведомлений с использованием Bootstrap Toast
  function showToast(message, type='info') {
    let toastId = 'toast-' + Date.now();
    let toastHtml = `
      <div id="${toastId}" class="toast align-items-center text-white bg-${type} border-0" role="alert" aria-live="assertive" aria-atomic="true">
        <div class="d-flex">
          <div class="toast-body">
            ${message}
          </div>
          <button type="button" class="btn-close btn-close-white me-2 m-auto" data-bs-dismiss="toast" aria-label="Close"></button>
        </div>
      </div>
    `;
    $('#toast-container').append(toastHtml);
    let toastEl = new bootstrap.Toast(document.getElementById(toastId), { delay: 3000 });
    toastEl.show();
  }

  // Функция сортировки устройств с учетом числовых и булевых значений
  function sortDevices(orderBy, ascending) {
    let cards = $('.device-card').get();
    cards.sort(function(a, b) {
      let aVal = $(a).data(orderBy);
      let bVal = $(b).data(orderBy);
      
      if (orderBy === 'last_seen') {
        aVal = new Date(aVal).getTime();
        bVal = new Date(bVal).getTime();
      } else if (orderBy === 'connected') {
        // Приводим булевы значения к числам (true: 1, false: 0)
        aVal = (aVal === true || aVal === "true") ? 1 : 0;
        bVal = (bVal === true || bVal === "true") ? 1 : 0;
      } else if ($.isNumeric(aVal) && $.isNumeric(bVal)) {
        aVal = parseFloat(aVal);
        bVal = parseFloat(bVal);
      } else {
        aVal = aVal.toString().toLowerCase();
        bVal = bVal.toString().toLowerCase();
      }
      
      if (aVal < bVal) return ascending ? -1 : 1;
      if (aVal > bVal) return ascending ? 1 : -1;
      return 0;
    });
    $('#devices-list').html(cards);
  }

  // Обработчик изменения параметра сортировки
  $('#sort-options').on('change', function() {
    const orderBy = $(this).val();
    sortDevices(orderBy, ascendingOrder);
  });

  // Обработчик переключения порядка сортировки
  $('#toggle-order').on('click', function(e) {
    e.preventDefault();
    ascendingOrder = !ascendingOrder;
    const orderBy = $('#sort-options').val();
    sortDevices(orderBy, ascendingOrder);
    $(this).text(`Порядок: ${ascendingOrder ? 'по возрастанию' : 'по убыванию'}`);
  });

  // Инициализация сортировки при загрузке
  sortDevices($('#sort-options').val(), ascendingOrder);

  // Инициализация поиска
  $('#search').on('input', function() {
    const searchText = $(this).val().toLowerCase();
    $('.device-card').each(function() {
      const deviceText = $(this).text().toLowerCase();
      $(this).toggle(deviceText.includes(searchText));
    });
  });

  // Загрузка истории устройства при открытии модального окна
  $('.modal').on('show.bs.modal', function () {
    const modal = $(this);
    const deviceId = modal.attr('id').replace('historyModal-', '');
    const historyList = modal.find('#history-list-' + deviceId);
    
    $.get(`/device-history/${deviceId}`, function(history) {
      historyList.empty();
      history.forEach(event => {
        historyList.append(`
          <li class="list-group-item d-flex justify-content-between align-items-center">
            <div><i class="bi bi-${getEventIcon(event.event_type)} me-2"></i>${event.event_type}</div>
            <span>${formatDate(event.event_time)}</span>
          </li>
        `);
      });
    }).fail(function() {
      historyList.html('<li class="list-group-item text-danger">Ошибка загрузки истории</li>');
    });
  });

  // Обработка нажатия на кнопку "Управление"
  $('.manage-device').on('click', function() {
    const ip = $(this).data('ip');
    openVNCViewer(ip);
  });

  // Обработка нажатия на кнопку "IP"
  $('.manage-device-ip').on('click', function() {
    const ip = $(this).data('ip');
    showToast('IP скопирован в буфер обмена!', 'success');
    if (navigator.clipboard) {
      navigator.clipboard.writeText(ip).then(() => {
        console.log("IP скопирован в буфер обмена:", ip);
      }).catch(err => {
        console.error("Ошибка копирования в буфер обмена", err);
      });
    }
  });

  // Функция для открытия VNC Viewer
  function openVNCViewer(ip) {
    const vncUrl = `vnc://${ip}`;
    window.location.href = vncUrl;
    setTimeout(() => {
      if (document.visibilityState === 'visible') {
        showToast('VNC-протокол не поддерживается!', 'danger');
        showToast('IP скопирован в буфер обмена', 'warning');
        if (navigator.clipboard) {
          navigator.clipboard.writeText(ip).then(() => {
            console.log("IP скопирован в буфер обмена:", ip);
          }).catch(err => {
            console.error("Ошибка копирования в буфер обмена", err);
          });
        }
      }
    }, 1000);
  }

  // Функция для получения иконки события (с использованием Bootstrap Icons)
  function getEventIcon(eventType) {
    switch (eventType) {
      case 'connected': return 'check-circle';
      case 'disconnected': return 'x-circle';
      case 'ip_changed': return 'arrow-repeat';
      default: return 'info-circle';
    }
  }
});
</script>
</body>
</html>
